/* 
 * Binance REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Ticker24hr {
  #[serde(rename = "symbol")]
  symbol: String,
  #[serde(rename = "priceChange")]
  price_change: String,
  #[serde(rename = "priceChangePercent")]
  price_change_percent: String,
  #[serde(rename = "weightedAvgPrice")]
  weighted_avg_price: String,
  #[serde(rename = "prevClosePrice")]
  prev_close_price: String,
  #[serde(rename = "lastPrice")]
  last_price: String,
  #[serde(rename = "lastQty")]
  last_qty: String,
  #[serde(rename = "bidPrice")]
  bid_price: String,
  #[serde(rename = "askPrice")]
  ask_price: String,
  #[serde(rename = "openPrice")]
  open_price: String,
  #[serde(rename = "highPrice")]
  high_price: String,
  #[serde(rename = "lowPrice")]
  low_price: String,
  #[serde(rename = "volume")]
  volume: String,
  #[serde(rename = "quoteVolume")]
  quote_volume: String,
  #[serde(rename = "openTime")]
  open_time: f32,
  #[serde(rename = "closeTime")]
  close_time: f32,
  #[serde(rename = "firstId")]
  first_id: f32,
  #[serde(rename = "lastId")]
  last_id: f32,
  #[serde(rename = "count")]
  count: f32
}

impl Ticker24hr {
  pub fn new(symbol: String, price_change: String, price_change_percent: String, weighted_avg_price: String, prev_close_price: String, last_price: String, last_qty: String, bid_price: String, ask_price: String, open_price: String, high_price: String, low_price: String, volume: String, quote_volume: String, open_time: f32, close_time: f32, first_id: f32, last_id: f32, count: f32) -> Ticker24hr {
    Ticker24hr {
      symbol: symbol,
      price_change: price_change,
      price_change_percent: price_change_percent,
      weighted_avg_price: weighted_avg_price,
      prev_close_price: prev_close_price,
      last_price: last_price,
      last_qty: last_qty,
      bid_price: bid_price,
      ask_price: ask_price,
      open_price: open_price,
      high_price: high_price,
      low_price: low_price,
      volume: volume,
      quote_volume: quote_volume,
      open_time: open_time,
      close_time: close_time,
      first_id: first_id,
      last_id: last_id,
      count: count
    }
  }

  pub fn set_symbol(&mut self, symbol: String) {
    self.symbol = symbol;
  }

  pub fn with_symbol(mut self, symbol: String) -> Ticker24hr {
    self.symbol = symbol;
    self
  }

  pub fn symbol(&self) -> &String {
    &self.symbol
  }


  pub fn set_price_change(&mut self, price_change: String) {
    self.price_change = price_change;
  }

  pub fn with_price_change(mut self, price_change: String) -> Ticker24hr {
    self.price_change = price_change;
    self
  }

  pub fn price_change(&self) -> &String {
    &self.price_change
  }


  pub fn set_price_change_percent(&mut self, price_change_percent: String) {
    self.price_change_percent = price_change_percent;
  }

  pub fn with_price_change_percent(mut self, price_change_percent: String) -> Ticker24hr {
    self.price_change_percent = price_change_percent;
    self
  }

  pub fn price_change_percent(&self) -> &String {
    &self.price_change_percent
  }


  pub fn set_weighted_avg_price(&mut self, weighted_avg_price: String) {
    self.weighted_avg_price = weighted_avg_price;
  }

  pub fn with_weighted_avg_price(mut self, weighted_avg_price: String) -> Ticker24hr {
    self.weighted_avg_price = weighted_avg_price;
    self
  }

  pub fn weighted_avg_price(&self) -> &String {
    &self.weighted_avg_price
  }


  pub fn set_prev_close_price(&mut self, prev_close_price: String) {
    self.prev_close_price = prev_close_price;
  }

  pub fn with_prev_close_price(mut self, prev_close_price: String) -> Ticker24hr {
    self.prev_close_price = prev_close_price;
    self
  }

  pub fn prev_close_price(&self) -> &String {
    &self.prev_close_price
  }


  pub fn set_last_price(&mut self, last_price: String) {
    self.last_price = last_price;
  }

  pub fn with_last_price(mut self, last_price: String) -> Ticker24hr {
    self.last_price = last_price;
    self
  }

  pub fn last_price(&self) -> &String {
    &self.last_price
  }


  pub fn set_last_qty(&mut self, last_qty: String) {
    self.last_qty = last_qty;
  }

  pub fn with_last_qty(mut self, last_qty: String) -> Ticker24hr {
    self.last_qty = last_qty;
    self
  }

  pub fn last_qty(&self) -> &String {
    &self.last_qty
  }


  pub fn set_bid_price(&mut self, bid_price: String) {
    self.bid_price = bid_price;
  }

  pub fn with_bid_price(mut self, bid_price: String) -> Ticker24hr {
    self.bid_price = bid_price;
    self
  }

  pub fn bid_price(&self) -> &String {
    &self.bid_price
  }


  pub fn set_ask_price(&mut self, ask_price: String) {
    self.ask_price = ask_price;
  }

  pub fn with_ask_price(mut self, ask_price: String) -> Ticker24hr {
    self.ask_price = ask_price;
    self
  }

  pub fn ask_price(&self) -> &String {
    &self.ask_price
  }


  pub fn set_open_price(&mut self, open_price: String) {
    self.open_price = open_price;
  }

  pub fn with_open_price(mut self, open_price: String) -> Ticker24hr {
    self.open_price = open_price;
    self
  }

  pub fn open_price(&self) -> &String {
    &self.open_price
  }


  pub fn set_high_price(&mut self, high_price: String) {
    self.high_price = high_price;
  }

  pub fn with_high_price(mut self, high_price: String) -> Ticker24hr {
    self.high_price = high_price;
    self
  }

  pub fn high_price(&self) -> &String {
    &self.high_price
  }


  pub fn set_low_price(&mut self, low_price: String) {
    self.low_price = low_price;
  }

  pub fn with_low_price(mut self, low_price: String) -> Ticker24hr {
    self.low_price = low_price;
    self
  }

  pub fn low_price(&self) -> &String {
    &self.low_price
  }


  pub fn set_volume(&mut self, volume: String) {
    self.volume = volume;
  }

  pub fn with_volume(mut self, volume: String) -> Ticker24hr {
    self.volume = volume;
    self
  }

  pub fn volume(&self) -> &String {
    &self.volume
  }


  pub fn set_quote_volume(&mut self, quote_volume: String) {
    self.quote_volume = quote_volume;
  }

  pub fn with_quote_volume(mut self, quote_volume: String) -> Ticker24hr {
    self.quote_volume = quote_volume;
    self
  }

  pub fn quote_volume(&self) -> &String {
    &self.quote_volume
  }


  pub fn set_open_time(&mut self, open_time: f32) {
    self.open_time = open_time;
  }

  pub fn with_open_time(mut self, open_time: f32) -> Ticker24hr {
    self.open_time = open_time;
    self
  }

  pub fn open_time(&self) -> &f32 {
    &self.open_time
  }


  pub fn set_close_time(&mut self, close_time: f32) {
    self.close_time = close_time;
  }

  pub fn with_close_time(mut self, close_time: f32) -> Ticker24hr {
    self.close_time = close_time;
    self
  }

  pub fn close_time(&self) -> &f32 {
    &self.close_time
  }


  pub fn set_first_id(&mut self, first_id: f32) {
    self.first_id = first_id;
  }

  pub fn with_first_id(mut self, first_id: f32) -> Ticker24hr {
    self.first_id = first_id;
    self
  }

  pub fn first_id(&self) -> &f32 {
    &self.first_id
  }


  pub fn set_last_id(&mut self, last_id: f32) {
    self.last_id = last_id;
  }

  pub fn with_last_id(mut self, last_id: f32) -> Ticker24hr {
    self.last_id = last_id;
    self
  }

  pub fn last_id(&self) -> &f32 {
    &self.last_id
  }


  pub fn set_count(&mut self, count: f32) {
    self.count = count;
  }

  pub fn with_count(mut self, count: f32) -> Ticker24hr {
    self.count = count;
    self
  }

  pub fn count(&self) -> &f32 {
    &self.count
  }


}



