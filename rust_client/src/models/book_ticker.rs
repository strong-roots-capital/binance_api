/* 
 * Binance REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BookTicker {
  #[serde(rename = "symbol")]
  symbol: String,
  #[serde(rename = "bidPrice")]
  bid_price: String,
  #[serde(rename = "bidQty")]
  bid_qty: String,
  #[serde(rename = "askPrice")]
  ask_price: String,
  #[serde(rename = "askQty")]
  ask_qty: String
}

impl BookTicker {
  pub fn new(symbol: String, bid_price: String, bid_qty: String, ask_price: String, ask_qty: String) -> BookTicker {
    BookTicker {
      symbol: symbol,
      bid_price: bid_price,
      bid_qty: bid_qty,
      ask_price: ask_price,
      ask_qty: ask_qty
    }
  }

  pub fn set_symbol(&mut self, symbol: String) {
    self.symbol = symbol;
  }

  pub fn with_symbol(mut self, symbol: String) -> BookTicker {
    self.symbol = symbol;
    self
  }

  pub fn symbol(&self) -> &String {
    &self.symbol
  }


  pub fn set_bid_price(&mut self, bid_price: String) {
    self.bid_price = bid_price;
  }

  pub fn with_bid_price(mut self, bid_price: String) -> BookTicker {
    self.bid_price = bid_price;
    self
  }

  pub fn bid_price(&self) -> &String {
    &self.bid_price
  }


  pub fn set_bid_qty(&mut self, bid_qty: String) {
    self.bid_qty = bid_qty;
  }

  pub fn with_bid_qty(mut self, bid_qty: String) -> BookTicker {
    self.bid_qty = bid_qty;
    self
  }

  pub fn bid_qty(&self) -> &String {
    &self.bid_qty
  }


  pub fn set_ask_price(&mut self, ask_price: String) {
    self.ask_price = ask_price;
  }

  pub fn with_ask_price(mut self, ask_price: String) -> BookTicker {
    self.ask_price = ask_price;
    self
  }

  pub fn ask_price(&self) -> &String {
    &self.ask_price
  }


  pub fn set_ask_qty(&mut self, ask_qty: String) {
    self.ask_qty = ask_qty;
  }

  pub fn with_ask_qty(mut self, ask_qty: String) -> BookTicker {
    self.ask_qty = ask_qty;
    self
  }

  pub fn ask_qty(&self) -> &String {
    &self.ask_qty
  }


}



