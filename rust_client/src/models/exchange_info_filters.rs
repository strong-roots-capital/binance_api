/* 
 * Binance REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ExchangeInfoFilters {
  #[serde(rename = "filterType")]
  filter_type: Option<String>,
  #[serde(rename = "minPrice")]
  min_price: Option<String>,
  #[serde(rename = "maxPrice")]
  max_price: Option<String>,
  #[serde(rename = "tickSize")]
  tick_size: Option<String>,
  #[serde(rename = "limit")]
  limit: Option<i32>,
  #[serde(rename = "maxNumAlgoOrders")]
  max_num_algo_orders: Option<i32>
}

impl ExchangeInfoFilters {
  pub fn new() -> ExchangeInfoFilters {
    ExchangeInfoFilters {
      filter_type: None,
      min_price: None,
      max_price: None,
      tick_size: None,
      limit: None,
      max_num_algo_orders: None
    }
  }

  pub fn set_filter_type(&mut self, filter_type: String) {
    self.filter_type = Some(filter_type);
  }

  pub fn with_filter_type(mut self, filter_type: String) -> ExchangeInfoFilters {
    self.filter_type = Some(filter_type);
    self
  }

  pub fn filter_type(&self) -> Option<&String> {
    self.filter_type.as_ref()
  }

  pub fn reset_filter_type(&mut self) {
    self.filter_type = None;
  }

  pub fn set_min_price(&mut self, min_price: String) {
    self.min_price = Some(min_price);
  }

  pub fn with_min_price(mut self, min_price: String) -> ExchangeInfoFilters {
    self.min_price = Some(min_price);
    self
  }

  pub fn min_price(&self) -> Option<&String> {
    self.min_price.as_ref()
  }

  pub fn reset_min_price(&mut self) {
    self.min_price = None;
  }

  pub fn set_max_price(&mut self, max_price: String) {
    self.max_price = Some(max_price);
  }

  pub fn with_max_price(mut self, max_price: String) -> ExchangeInfoFilters {
    self.max_price = Some(max_price);
    self
  }

  pub fn max_price(&self) -> Option<&String> {
    self.max_price.as_ref()
  }

  pub fn reset_max_price(&mut self) {
    self.max_price = None;
  }

  pub fn set_tick_size(&mut self, tick_size: String) {
    self.tick_size = Some(tick_size);
  }

  pub fn with_tick_size(mut self, tick_size: String) -> ExchangeInfoFilters {
    self.tick_size = Some(tick_size);
    self
  }

  pub fn tick_size(&self) -> Option<&String> {
    self.tick_size.as_ref()
  }

  pub fn reset_tick_size(&mut self) {
    self.tick_size = None;
  }

  pub fn set_limit(&mut self, limit: i32) {
    self.limit = Some(limit);
  }

  pub fn with_limit(mut self, limit: i32) -> ExchangeInfoFilters {
    self.limit = Some(limit);
    self
  }

  pub fn limit(&self) -> Option<&i32> {
    self.limit.as_ref()
  }

  pub fn reset_limit(&mut self) {
    self.limit = None;
  }

  pub fn set_max_num_algo_orders(&mut self, max_num_algo_orders: i32) {
    self.max_num_algo_orders = Some(max_num_algo_orders);
  }

  pub fn with_max_num_algo_orders(mut self, max_num_algo_orders: i32) -> ExchangeInfoFilters {
    self.max_num_algo_orders = Some(max_num_algo_orders);
    self
  }

  pub fn max_num_algo_orders(&self) -> Option<&i32> {
    self.max_num_algo_orders.as_ref()
  }

  pub fn reset_max_num_algo_orders(&mut self) {
    self.max_num_algo_orders = None;
  }

}



