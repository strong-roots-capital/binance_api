/* 
 * Binance REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ExchangeInfo {
  #[serde(rename = "timezone")]
  timezone: String,
  #[serde(rename = "serverTime")]
  server_time: f32,
  #[serde(rename = "rateLimits")]
  rate_limits: Vec<::models::ExchangeInfoRateLimits>,
  #[serde(rename = "exchangeFilters")]
  exchange_filters: Vec<Value>,
  #[serde(rename = "symbols")]
  symbols: Vec<::models::ExchangeInfoSymbols>
}

impl ExchangeInfo {
  pub fn new(timezone: String, server_time: f32, rate_limits: Vec<::models::ExchangeInfoRateLimits>, exchange_filters: Vec<Value>, symbols: Vec<::models::ExchangeInfoSymbols>) -> ExchangeInfo {
    ExchangeInfo {
      timezone: timezone,
      server_time: server_time,
      rate_limits: rate_limits,
      exchange_filters: exchange_filters,
      symbols: symbols
    }
  }

  pub fn set_timezone(&mut self, timezone: String) {
    self.timezone = timezone;
  }

  pub fn with_timezone(mut self, timezone: String) -> ExchangeInfo {
    self.timezone = timezone;
    self
  }

  pub fn timezone(&self) -> &String {
    &self.timezone
  }


  pub fn set_server_time(&mut self, server_time: f32) {
    self.server_time = server_time;
  }

  pub fn with_server_time(mut self, server_time: f32) -> ExchangeInfo {
    self.server_time = server_time;
    self
  }

  pub fn server_time(&self) -> &f32 {
    &self.server_time
  }


  pub fn set_rate_limits(&mut self, rate_limits: Vec<::models::ExchangeInfoRateLimits>) {
    self.rate_limits = rate_limits;
  }

  pub fn with_rate_limits(mut self, rate_limits: Vec<::models::ExchangeInfoRateLimits>) -> ExchangeInfo {
    self.rate_limits = rate_limits;
    self
  }

  pub fn rate_limits(&self) -> &Vec<::models::ExchangeInfoRateLimits> {
    &self.rate_limits
  }


  pub fn set_exchange_filters(&mut self, exchange_filters: Vec<Value>) {
    self.exchange_filters = exchange_filters;
  }

  pub fn with_exchange_filters(mut self, exchange_filters: Vec<Value>) -> ExchangeInfo {
    self.exchange_filters = exchange_filters;
    self
  }

  pub fn exchange_filters(&self) -> &Vec<Value> {
    &self.exchange_filters
  }


  pub fn set_symbols(&mut self, symbols: Vec<::models::ExchangeInfoSymbols>) {
    self.symbols = symbols;
  }

  pub fn with_symbols(mut self, symbols: Vec<::models::ExchangeInfoSymbols>) -> ExchangeInfo {
    self.symbols = symbols;
    self
  }

  pub fn symbols(&self) -> &Vec<::models::ExchangeInfoSymbols> {
    &self.symbols
  }


}



