/* 
 * Binance REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct DefaultApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> DefaultApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DefaultApiClient<C> {
        DefaultApiClient {
            configuration: configuration,
        }
    }
}

pub trait DefaultApi {
    fn agg_trades(&self, symbol: &str, limit: i32, from_id: f32, start_time: f32, end_time: f32) -> Box<Future<Item = ::models::AggTrades, Error = Error<serde_json::Value>>>;
    fn book_ticker(&self, symbol: &str) -> Box<Future<Item = ::models::BookTickerlist, Error = Error<serde_json::Value>>>;
    fn depth(&self, symbol: &str, limit: i32) -> Box<Future<Item = ::models::Depth, Error = Error<serde_json::Value>>>;
    fn exchange_info(&self, ) -> Box<Future<Item = ::models::ExchangeInfo, Error = Error<serde_json::Value>>>;
    fn klines(&self, symbol: &str, interval: ::models::CandlestickIntervals, limit: i32, start_time: f32, end_time: f32) -> Box<Future<Item = ::models::Klines, Error = Error<serde_json::Value>>>;
    fn ticker24hr(&self, symbol: &str) -> Box<Future<Item = ::models::Ticker24hrlist, Error = Error<serde_json::Value>>>;
    fn trades(&self, symbol: &str, limit: i32) -> Box<Future<Item = ::models::Trades, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>DefaultApi for DefaultApiClient<C> {
    fn agg_trades(&self, symbol: &str, limit: i32, from_id: f32, start_time: f32, end_time: f32) -> Box<Future<Item = ::models::AggTrades, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/aggTrades".to_string())
            .with_query_param("symbol".to_string(), symbol.to_string())
            .with_query_param("limit".to_string(), limit.to_string())
            .with_query_param("fromId".to_string(), from_id.to_string())
            .with_query_param("startTime".to_string(), start_time.to_string())
            .with_query_param("endTime".to_string(), end_time.to_string())
            .execute(self.configuration.borrow())
    }

    fn book_ticker(&self, symbol: &str) -> Box<Future<Item = ::models::BookTickerlist, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/ticker/bookTicker".to_string())
            .with_query_param("symbol".to_string(), symbol.to_string())
            .execute(self.configuration.borrow())
    }

    fn depth(&self, symbol: &str, limit: i32) -> Box<Future<Item = ::models::Depth, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/depth".to_string())
            .with_query_param("symbol".to_string(), symbol.to_string())
            .with_query_param("limit".to_string(), limit.to_string())
            .execute(self.configuration.borrow())
    }

    fn exchange_info(&self, ) -> Box<Future<Item = ::models::ExchangeInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/exchangeInfo".to_string())
            .execute(self.configuration.borrow())
    }

    fn klines(&self, symbol: &str, interval: ::models::CandlestickIntervals, limit: i32, start_time: f32, end_time: f32) -> Box<Future<Item = ::models::Klines, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/klines".to_string())
            .with_query_param("symbol".to_string(), symbol.to_string())
            .with_query_param("interval".to_string(), interval.to_string())
            .with_query_param("limit".to_string(), limit.to_string())
            .with_query_param("startTime".to_string(), start_time.to_string())
            .with_query_param("endTime".to_string(), end_time.to_string())
            .execute(self.configuration.borrow())
    }

    fn ticker24hr(&self, symbol: &str) -> Box<Future<Item = ::models::Ticker24hrlist, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/ticker/24hr".to_string())
            .with_query_param("symbol".to_string(), symbol.to_string())
            .execute(self.configuration.borrow())
    }

    fn trades(&self, symbol: &str, limit: i32) -> Box<Future<Item = ::models::Trades, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/trades".to_string())
            .with_query_param("symbol".to_string(), symbol.to_string())
            .with_query_param("limit".to_string(), limit.to_string())
            .execute(self.configuration.borrow())
    }

}
