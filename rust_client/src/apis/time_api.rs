/* 
 * Binance REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct TimeApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> TimeApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> TimeApiClient<C> {
        TimeApiClient {
            configuration: configuration,
        }
    }
}

pub trait TimeApi {
    fn time(&self, ) -> Box<Future<Item = ::models::Servertime, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>TimeApi for TimeApiClient<C> {
    fn time(&self, ) -> Box<Future<Item = ::models::Servertime, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/time".to_string())
            .execute(self.configuration.borrow())
    }

}
