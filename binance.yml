openapi: 3.0.0

info:
  title: Binance REST API
  version: 0.0.1

# TODO: use version as a variable that could be overwritten in path
servers:
- url: https://api.binance.com/api/v1
  description: API version 1

paths:

####### General endpoints #######

  /ping:
    get:
      operationId: ping
      summary: Test connectivity to the Rest API
      tags:
        - ping
      responses:
        200:
          description: success
        # Definition of all error statuses
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorcode'

  /time:
    get:
      operationId: time
      summary: Test connectivity to the Rest API and get the current server time
      tags:
        - time
      responses:
        200:
          $ref: '#/components/responses/time'
        # Definition of all error statuses
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorcode'
                
  /exchangeInfo:
    get:
      operationId: exchangeInfo
      summary: Current exchange trading rules and symbol information
      responses:
        200:
          description: Current time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exchangeInfo'
        # Definition of all error statuses
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorcode'

####### Market Data endpoints #######
  
  /depth:
    get:
      operationId: depth
      summary: Order book. Weight is Adjusted based on the limit
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
          required: true
          description: Market Symbol
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Default 100; max 1000. Valid limits:[5, 10, 20, 50, 100, 500, 1000], setting limit=0 can return a lot of data
      responses:
        200:
          description: Market depth
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/depth'
        # Definition of all error statuses
        default:
          $ref: '#/components/responses/Error'
                
  /trades:
    get:
      operationId: trades
      summary: Get recent trades (up to last 500)
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
          required: true
          description: Market Symbol
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Default 500; max 1000.
      responses:
        200:
          description: Market depth
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trades'
        # Definition of all error statuses
        default:
          $ref: '#/components/responses/Error'

  /aggTrades:
    get:
      operationId: aggTrades
      summary: Get compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
          required: true
          description: Market Symbol
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Default 500; max 1000.
        - in: query
          name: fromId
          schema:
            type: number
          required: false
          description: ID to get aggregate trades from INCLUSIVE.
        - in: query
          name: startTime
          schema:
            type: number
          required: false
          description: Timestamp in ms to get aggregate trades from INCLUSIVE.
        - in: query
          name: endTime
          schema:
            type: number
          required: false
          description: Timestamp in ms to get aggregate trades until INCLUSIVE.
      responses:
        200:
          description: Market depth
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aggTrades'
        # Definition of all error statuses
        default:
          $ref: '#/components/responses/Error'

  /klines:
    get:
      operationId: klines
      summary: Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time.
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
          required: true
          description: Market Symbol
        - in: query
          name: interval
          schema:
            $ref: '#/components/schemas/CandlestickIntervals'
          required: true
          description: Default 500; max 1000.
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Default 500; max 1000.
        - in: query
          name: startTime
          schema:
            type: number
          required: false
          description: Timestamp in ms to get candlestick bars from INCLUSIVE.
        - in: query
          name: endTime
          schema:
            type: number
          required: false
          description: Timestamp in ms to get candlestick bars until INCLUSIVE.
      responses:
        200:
          description: Array items corresponds to these types in this order; Open time, Open, High, Low, Close, Volume, Close time, Quote asset volume, Number of trades, Taker buy base asset volume, Taker buy quote asset volume, Ignore
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/klines'
        # Definition of all error statuses
        default:
          $ref: '#/components/responses/Error'
  
  /ticker/24hr:
    get:
      operationId: ticker24hr
      summary: 24 hour price change statistics. Careful when accessing this with no symbol.
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
          required: false
          description: Market Symbol
      responses:
        200:
          description: Ticker/s for the last 24hr
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ticker24hr'
                  - $ref: '#/components/schemas/ticker24hrlist'
        # Definition of all error statuses
        default:
          $ref: '#/components/responses/Error'

  /ticker/bookTicker:
    servers:
      - url: https://api.binance.com/api/v3
    description: API version 3
    get:
      operationId: bookTicker
      summary: Best price/qty on the order book for a symbol or symbols.
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
          required: false
          description: Market Symbol
      responses:
        200:
          description: Ticker/s for the last 24hr
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bookTicker'
                  - $ref: '#/components/schemas/bookTickerlist'
        # Definition of all error statuses
        default:
          $ref: '#/components/responses/Error'

####### Account endpoints #######

# 2) Apply the API key globally to all operations
#security:
#  - ApiKeyAuth: []     # use the same name as under securitySchemes

components:
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: X-MBX-APIKEY  # name of the header, query parameter or cookie
      
  responses:
    time:
      description: Current time
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/servertime'

    Error:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorcode'            

  schemas:

####### Enums #######

    SymbolStatus:
      type: string
      enum:
        - PRE_TRADING
        - TRADING
        - POST_TRADING
        - END_OF_DAY
        - HALT
        - AUCTION_MATCH
        - BREAK

    SymbolType:
      type: string
      enum:
        - SPOT
        
    OrderStatus:
      type: string
      enum:
        - NEW
        - PARTIALLY_FILLED
        - FILLED
        - CANCELED
        - PENDING_CANCEL (currently unused)
        - REJECTED
        - EXPIRED

    OrderTypes:
      type: string
      enum:
        - LIMIT
        - MARKET
        - STOP_LOSS
        - STOP_LOSS_LIMIT
        - TAKE_PROFIT
        - TAKE_PROFIT_LIMIT
        - LIMIT_MAKER

    OrderSide:
      type: string
      enum:
        - BUY
        - SELL

    TimeInForce:
      type: string
      enum:
        - GTC
        - IOC
        - FOK

    CandlestickIntervals:
      type: string
      enum:
        - 1m
        - 3m
        - 5m
        - 15m
        - 30m
        - 1h
        - 2h
        - 4h
        - 6h
        - 8h
        - 12h
        - 1d
        - 3d
        - 1w
        - 1M

    RateLimitType:
      type: string
      enum:
        - REQUESTS_WEIGHT
        - ORDERS

    RateLimitIntervals:
      type: string
      enum:
        - SECOND
        - MINUTE
        - DAY      

####### Errors #######

    # Any endpoint can return an ERROR
    errorcode:
      required: 
        - "code"
        - "msg"
      properties: 
        code: 
          type: "number"
        msg: 
          type: "string"

####### General models #######

    servertime:
      type: object
      properties:
        serverTime:
          type: string
      required:
        - serverTime

    exchangeInfo:
      required: 
        - "timezone"
        - "serverTime"
        - "rateLimits"
        - "exchangeFilters"
        - "symbols"
      properties: 
        timezone: 
          type: "string"
        serverTime: 
          type: "number"
        rateLimits: 
          type: "array"
          items: 
            type: "object"
            properties: 
              rateLimitType: 
                type: "string"
              interval: 
                type: "string"
              limit: 
                type: "number"
        exchangeFilters: 
          type: "array"
          items: 
            type: "object"
        symbols: 
          type: "array"
          items: 
            type: "object"
            properties: 
              symbol: 
                type: "string"
              status: 
                type: "string"
              baseAsset: 
                type: "string"
              baseAssetPrecision: 
                type: "number"
              quoteAsset: 
                type: "string"
              quotePrecision: 
                type: "number"
              orderTypes: 
                type: "array"
                items: 
                  type: "string"
              icebergAllowed: 
                type: "boolean"
              filters: 
                type: "array"
                items: 
                  type: "object"
                  properties: 
                    filterType: 
                      type: "string"
                    minPrice: 
                      type: "string"
                    maxPrice: 
                      type: "string"
                    tickSize: 
                      type: "string"
                    limit: 
                      type: "integer"
                    maxNumAlgoOrders: 
                      type: "integer"

####### Market Data models #######

    trades:
      type: "array"
      items:
        type: "object"
        required:
          - "id"
          - "price"
          - "qty"
          - "time"
          - "isBuyerMaker"
          - "isBestMatch"
        properties:
          id:
            type: "number"
          price:
            type: "string"
          qty:
            type: "string"
          time:
            type: "number"
          isBuyerMaker:
            type: "boolean"
          isBestMatch:
            type: "boolean"

    depth:
      required: 
        - "lastUpdateId"
        - "bids"
        - "asks"
      properties:
        lastUpdateId: 
          type: "number"
        bids:
          type: "array"
          items:
            type: "array"
            items:
              type: "string"
        asks: 
          type: "array"
          items:
            type: "array"
            items:
              type: "string"
    
    aggTrades:
      type: "array"
      items:
        type: "object"
        required: 
          - "a"
          - "p"
          - "q"
          - "f"
          - "l"
          - "T"
          - "m"
          - "M"
        properties: 
          a: 
            type: "integer"
          p: 
            type: "string"
          q: 
            type: "string"
          f: 
            type: "integer"
          l: 
            type: "integer"
          T: 
            type: "integer"
          m: 
            type: "boolean"
          M: 
            type: "boolean"

    klines:
      type: "array"
      items:
        type: "array"
        items: 
          oneOf:
            - type: string
            - type: integer

    ticker24hrlist:
      type: "array"
      items:
        $ref: '#/components/schemas/ticker24hr'
      
    ticker24hr:
      required: 
        - "symbol"
        - "priceChange"
        - "priceChangePercent"
        - "weightedAvgPrice"
        - "prevClosePrice"
        - "lastPrice"
        - "lastQty"
        - "bidPrice"
        - "askPrice"
        - "openPrice"
        - "highPrice"
        - "lowPrice"
        - "volume"
        - "quoteVolume"
        - "openTime"
        - "closeTime"
        - "firstId"
        - "lastId"
        - "count"
      properties: 
        symbol: 
          type: "string"
        priceChange: 
          type: "string"
        priceChangePercent: 
          type: "string"
        weightedAvgPrice: 
          type: "string"
        prevClosePrice: 
          type: "string"
        lastPrice: 
          type: "string"
        lastQty: 
          type: "string"
        bidPrice: 
          type: "string"
        askPrice: 
          type: "string"
        openPrice: 
          type: "string"
        highPrice: 
          type: "string"
        lowPrice: 
          type: "string"
        volume: 
          type: "string"
        quoteVolume: 
          type: "string"
        openTime: 
          type: "number"
        closeTime: 
          type: "number"
        firstId: 
          type: "number"
        lastId: 
          type: "number"
        count: 
          type: "number"

    bookTickerlist:
      type: "array"
      items:
        $ref: '#/components/schemas/bookTicker'
    
    bookTicker:
      required: 
        - "symbol"
        - "bidPrice"
        - "bidQty"
        - "askPrice"
        - "askQty"
      properties: 
        symbol: 
          type: "string"
        bidPrice: 
          type: "string"
        bidQty: 
          type: "string"
        askPrice: 
          type: "string"
        askQty: 
          type: "string"
    